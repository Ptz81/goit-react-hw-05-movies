{"version":3,"file":"static/js/550.025f2e2d.chunk.js","mappings":"8PAEaA,E,OAAWC,EAAAA,OAAa,CACjCC,OAAQ,MACRC,IAAK,kCACLC,QAAS,+BACTC,OAAQ,CACJC,QAAS,mCACTC,SAAU,WAKX,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBR,EAASS,IAH7B,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,sCAMGC,QAAQC,MAAR,MANH,gFAoBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACGC,EADH,iBACwBD,GADxB,kBAGoBf,EAASS,IAAIO,GAHjC,uBAGKN,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,sCAMGC,QAAQC,MAAR,MANH,gF,mPCoEP,EA1FsB,WAAO,IAAD,UAC1B,GAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQJ,GAAYK,EAAAA,EAAAA,MAAZL,QACFM,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,UACzCC,EAAQL,GAAUA,EAAOM,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOd,CAAhB,IAClCe,GAAkBC,EAAAA,EAAAA,MAClBC,GAAWC,EAAAA,EAAAA,OAKjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,8GAEMrB,EAAAA,EAAAA,IAAgBC,GAFtB,OAEZqB,EAFY,OAGlBjB,EAAQiB,GAHU,gDAKlBxB,QAAQyB,IAAR,MALkB,yDAAH,qDAQnBF,GACD,GAAE,CAACpB,IAEJ,MAA+DW,GAAS,CAAC,EAAjEY,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,YAEzCC,EAAQD,EA3BC,mCA2BwBA,E,ynFACjCE,EAAYC,KAAKC,MAA8B,IAAvBC,OAAON,GAAuB,IACtDO,EAAcV,GAAUA,EAAOW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,IAEnE,OACE,8BACGlC,IACC,iCACE,mBAAQmC,UAAU,qBAAqBC,QA1B3B,WAAO,IAAD,EACxBtB,GAAwB,OAAfF,QAAe,IAAfA,GAAA,UAAAA,EAAiByB,aAAjB,eAAwBC,OAAQ,IAC1C,EAwBO,UACkB,OAAf1B,QAAe,IAAfA,GAAA,UAAAA,EAAiByB,aAAjB,eAAwBE,QAAS,aAEpC,iBAAKJ,UAAWK,EAAAA,EAAAA,IAAhB,WACE,gBAAKC,IAAKhB,EAAOiB,IAAKrB,KAEtB,iBAAKc,UAAWK,EAAAA,EAAAA,YAAhB,WACE,wBAAKnB,KACL,wCAAgBK,EAAhB,QACA,sCACA,uBAAIJ,KACJ,oCACA,uBAAIQ,WAIR,iBAAKK,UAAWK,EAAAA,EAAAA,WAAhB,WACE,oDACA,2BACE,yBACE,SAAC,KAAD,CACEG,GAAE,kBAAa9C,EAAb,SACFwC,MAAO,CACLC,MAAM,UAAA1B,EAAgByB,aAAhB,eAAuBC,OAAQ,IACrCC,MAAK,UAAE3B,EAAgByB,aAAlB,aAAE,EAAuBE,OAJlC,qBAWF,yBACE,SAAC,KAAD,CACEI,GAAE,kBAAa9C,EAAb,YACFwC,MAAO,CACLC,MAAM,UAAA1B,EAAgByB,aAAhB,eAAuBC,OAAQ,IACrCC,MAAK,UAAE3B,EAAgByB,aAAlB,aAAE,EAAuBE,OAJlC,8BAaN,SAAC,EAAAK,SAAD,CAAUC,UAAU,sCAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,wBAAwBC,SAAS,SAAC,IAAD,OAC7C,SAAC,KAAD,CAAOD,KAAK,2BAA2BC,SAAS,SAAC,IAAD,eAO7D,C","sources":["Service/Api.jsx","pages/Movies/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const instance = axios.create({\n    method: 'GET',\n    IMG: 'https://image.tmdb.org/t/p/w342',\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: 'c91e59fa560fc5d9b1a82432410ac72e',\n        language: 'en-US',\n    },\n});\n\n\nexport async function getTrendMovies() {\n  const routeWay = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getRequestedMovie(movieId) {\n    const routeWay = `/search/${movieId}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n    const routeWay = `/movie/${movieId}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n    const routeWay = `/movie/${movieId}/credits`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieReview(movieId) {\n    const routeWay = `/movie/${movieId}/reviews`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\n","import { useEffect, useState, Suspense } from \"react\";\nimport { Link, useLocation, useNavigate, useParams, Routes, Route } from \"react-router-dom\";\nimport { getMovieDetails } from '../../Service/Api';\n\nimport Cast from '../../components/Cast/Cast';\nimport Reviews from '../../components/Reviews/Reviews';\nimport css from '../../components/App.module.css';\nimport spareIMG from '../../components/img/spareIMG.png';\n\nconst IMAGEERR = 'https://image.tmdb.org/t/p/w500/';\n\nconst MoviesDetails = () => {\n  const [film, setFilm] = useState(null);\n  const { movieId } = useParams();\n  const movies = JSON.parse(localStorage.getItem('movie'));\n  const movie = movies && movies.find(elem => elem.id === movieId);\n  const locationDetails = useLocation();\n  const navigate = useNavigate();\n  const handleClick = () => {\n    navigate(locationDetails?.state?.from || '/');\n  };\n\n  useEffect(() => {\n    const fetchFilmData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setFilm(movieData);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchFilmData();\n  }, [movieId]);\n\n  const { genres, title, overview, vote_average, poster_path } = movie || {};\n\n  const image = poster_path ? IMAGEERR + poster_path : spareIMG;\n  const userScore = Math.round((Number(vote_average) * 100) / 10);\n  const movieGenres = genres && genres.map(genre => genre.name).join('');\n\n  return (\n    <>\n      {film && (\n        <>\n          <button className=\"btn btn-success m2\" onClick={handleClick}>\n            {locationDetails?.state?.label || 'Go Back'}\n          </button>\n          <div className={css.box}>\n            <img src={image} alt={title} />\n\n            <div className={css.description}>\n              <h2>{title}</h2>\n              <p>User Score: {userScore}%</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h4>Genres</h4>\n              <p>{movieGenres}</p>\n            </div>\n          </div>\n\n          <div className={css.additional}>\n            <h5>Additional information</h5>\n            <ul>\n              <li>\n                <Link\n                  to={`/movies/${movieId}/cast`}\n                  state={{\n                    from: locationDetails.state?.from || '/',\n                    label: locationDetails.state?.label,\n                  }}\n                >\n                  Cast\n                </Link>\n              </li>\n\n              <li>\n                <Link\n                  to={`/movies/${movieId}/reviews`}\n                  state={{\n                    from: locationDetails.state?.from || '/',\n                    label: locationDetails.state?.label,\n                  }}\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <Suspense fallback={<p>Loading...</p>}>\n            <Routes>\n              <Route path=\"/movies/:movieId/cast\" element={<Cast />} />\n              <Route path=\"/movies/:movieId/reviews\" element={<Reviews />} />\n            </Routes>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["instance","axios","method","IMG","baseURL","params","api_key","language","getTrendMovies","get","data","results","console","error","getMovieDetails","movieId","routeWay","useState","film","setFilm","useParams","movies","JSON","parse","localStorage","getItem","movie","find","elem","id","locationDetails","useLocation","navigate","useNavigate","useEffect","fetchFilmData","movieData","log","genres","title","overview","vote_average","poster_path","image","userScore","Math","round","Number","movieGenres","map","genre","name","join","className","onClick","state","from","label","css","src","alt","to","Suspense","fallback","path","element"],"sourceRoot":""}