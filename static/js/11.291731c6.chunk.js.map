{"version":3,"file":"static/js/11.291731c6.chunk.js","mappings":"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","sources":["Service/Api.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/Movies/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const instance = axios.create({\n  method: 'GET',\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'c91e59fa560fc5d9b1a82432410ac72e',\n    language: 'en-US',\n    SEARCH: 'search',\n    PATH: 'movie',\n  },\n});\n\nexport async function getTrendMovies() {\n  const routeWay = '/trending/movie/week';\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n// export async function searchMovie(request) {\n//   try {\n//     const { data } = await axios(`${instance.params.PATH}/${instance.params.SEARCH}`, {\n//       params: {\n//         language: 'en-US',\n//         query: request,\n//         include_adult: false,\n//       },\n//     });\n\n//     return data.results;\n//   } catch (e) {\n//     console.error(e);\n//   }\n// }\n// export async function searchMovie(request) {\n//   try {\n//     const { data } = await axios(`${instance.defaults.baseURL}/search/movie`, {\n//       params: {\n//         api_key: instance.defaults.params.api_key,\n//         language: instance.defaults.params.language,\n//         query: request,\n//         include_adult: false,\n//       },\n//     });\n\n//     return data.results;\n//   } catch (e) {\n//     console.error(e);\n//     throw e;\n//   }\n// }\nexport async function searchMovie(request) {\n  try {\n    const { data } = await instance.get(\"/search/movie\", {\n      params: {\n        query: request,\n        include_adult: false,\n      },\n    });\n\n    return data.results;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\n\nexport async function getRequestedMovie(request, movieId) {\n  const routeWay = `/movie/${movieId}${request}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  const routeWay = `/movie/${movieId}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  const routeWay = `/movie/${movieId}/credits`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n\nexport async function getMovieReview(movieId) {\n  const routeWay = `/movie/${movieId}/reviews`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item_img\":\"Cast_item_img__7Q7en\",\"list_item\":\"Cast_list_item__Fn+lK\",\"item\":\"Cast_item__a0CDL\",\"spare_img\":\"Cast_spare_img__nO0mw\",\"item_name\":\"Cast_item_name__Fiq4A\",\"item_character\":\"Cast_item_character__IpgeI\"};","import { getMovieCredits } from '../../Service/Api';\nimport spareIMG from '../../components/img/spareIMG.png';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport css from './Cast.module.css'\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCredits( movieId)\n      .then(data => setCast(data.cast || []));\n  }, [movieId]);\n\n  return (\n    <ul className=\"list-group list-group-flush\">\n      {cast.map(actor => (\n        <li key={actor.id} className='list-group-item'>\n          {actor.profile_path ? (\n            <img className={css.item_img} src={IMAGE_URL + actor.profile_path} alt={actor.name} />\n          ) : (\n            <img className={css.spare_img} src={spareIMG} alt={actor.name} />\n          )}\n          <p className=\"card-text\">{actor.name}</p>\n          <p className=\"card-text\">Character: {actor.character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Cast;\n","import { getMovieReview } from '../../Service/Api';\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n// import css from './Reviews.module.css'\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    getMovieReview(movieId)\n      .then(data => setReviews(data.results || []));\n  }, [movieId]);\n  return (\n    <ul className=\"list-group list-group-flush\">\n      {reviews.length > 0 ? (\n        reviews.map(review => (\n          <li key={review.id} className=\"list-group-item\">\n            <h3 className=\"card-title\">{review.author}</h3>\n            <p className=\"card-text\">{review.content}</p>\n          </li>\n        ))\n      ) : (\n        <p>No reviews found</p>\n      )}\n    </ul>\n  );\n}\nexport default Reviews;\n","import React, { Suspense, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate, Route, useParams, Routes } from \"react-router-dom\";\nimport { getRequestedMovie } from '../../Service/Api';\nimport Loading from '../../components/Loading/Loading'\n\nimport Cast from '../../components/Cast/Cast';\nimport Reviews from '../../components/Reviews/Reviews';\nimport css from '../../components/App.module.css';\nimport spareIMG from '../../components/img/spareIMG.png';\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500/';\n\nconst MoviesDetails = () => {\n//стан компоненту\n  const [film, setFilm] = useState([]);\n  //доступ до рядка та його властивостей\n  const locationDetails = useLocation();\n  //доступ до ід у рядку\n  const { movieId } = useParams();\n  //навігація по сайту\n  const navigate = useNavigate();\n\n  //виконання ефекту при зміні залежності movieId\n  useEffect(() => {\n    //Ця функція виконує запит на фільми, отримує дані\n    //та встановлює їх в стан компонента за допомогою функції setFilm.\n    // const fetchFilmData = async () => {\n      // try {\n      //   const movieData = await getRequestedMovie(null, movieId);\n      //   setFilm(movieData);\n      // } catch (error) {\n      //   console.log(error);\n      // }\n      getRequestedMovie(null, movieId).then(setFilm);\n    // };\n\n    // fetchFilmData();\n    //залежність ефекту від зміни значення movieId\n  }, [movieId]);\n\n//перевіряє наявність деяких властивостей в locationDetails та виконує навігацію на відповідний шлях.\n  const handleClick = () => {\n    navigate(locationDetails?.state?.from?.pathname ? `${locationDetails.state?.from?.pathname}${locationDetails.state?.from?.search}`\n        : '/',);\n  };\n\n  const { title, overview, vote_average, poster_path, genres } = film;\n\n  const image = poster_path ? `${IMAGE_URL}/${film.poster_path}` : spareIMG;\n  const userScore = Math.round((Number(vote_average) * 100) / 10);\n  const movieGenres = genres && genres.map(genre => genre.name).join(' ');\n\n  return (\n\n    <>\n      {film && (\n        <>\n            <button className=\"btn btn-success m-2\" onClick={handleClick}>\n        {locationDetails?.state?.label || 'Go Back'}\n      </button>\n      <div className=\"card\">\n        <img width={\"200px\"} src={image} alt={title} />\n\n        <div className=\"card-body\">\n          <h2 className=\"card-title\">{title}</h2>\n          <p className=\"card-text\">User Score: {userScore}%</p>\n          <h3 className=\"card-title\">Overview</h3>\n          <p className=\"card-text\">{overview}</p>\n          <h4 className=\"card-title\">Genres</h4>\n              <p className=\"card-text\">{movieGenres}</p>\n\n\n          <div className={css.addInfo}>\n            <h5>Additional information</h5>\n            <ul className={css.link}>\n              <li>\n                    <Link\n                      to={`cast`}\n                  state={{\n                    from: locationDetails.state.from,\n                    label: locationDetails.state.label,\n                  }}\n                  className='btn btn-outline-primary'\n                >\n                  Cast\n                </Link>\n              </li>\n\n              <li>\n                <Link\n                      to={`reviews`}\n                  state={{\n                    from: locationDetails.state.from,\n                    label: locationDetails.state.label,\n                  }}\n                  className='btn btn-outline-primary'\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n          </div>\n\n        <Suspense fallback={<Loading />}>\n            <Routes>\n              <Route path=\"/cast\" element={<Cast/>} />\n              <Route path=\"/reviews\" element={<Reviews/>} />\n            </Routes>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["instance","axios","method","baseURL","params","api_key","language","SEARCH","PATH","getTrendMovies","get","data","results","console","error","searchMovie","request","query","include_adult","getRequestedMovie","movieId","routeWay","getMovieCredits","getMovieReview","useState","cast","setCast","useParams","useEffect","then","className","map","actor","profile_path","css","src","alt","name","spareIMG","character","id","reviews","setReviews","length","review","author","content","film","setFilm","locationDetails","useLocation","navigate","useNavigate","title","overview","vote_average","poster_path","genres","image","userScore","Math","round","Number","movieGenres","genre","join","onClick","state","from","pathname","search","label","width","to","Suspense","fallback","Loading","path","element"],"sourceRoot":""}