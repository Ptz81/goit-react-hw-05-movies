{"version":3,"file":"static/js/839.dc442155.chunk.js","mappings":"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","sources":["Service/Api.jsx","pages/Movies/MovieForm.jsx","pages/Movies/Movies.jsx","pages/Movies/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const instance = axios.create({\n    method: 'GET',\n    IMG: 'https://image.tmdb.org/t/p/w342',\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: 'c91e59fa560fc5d9b1a82432410ac72e',\n        language: 'en-US',\n    },\n});\n\n\nexport async function getTrendMovies() {\n  const routeWay = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getRequestedMovie(movieId) {\n    const routeWay = `/search/${movieId}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n    const routeWay = `/movie/${movieId}`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n    const routeWay = `/movie/${movieId}/credits`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\nexport async function getMovieReview(movieId) {\n    const routeWay = `/movie/${movieId}/reviews`;\n  try {\n    const { data } = await instance.get(routeWay);\n    return data.results;\n  } catch (error) {\n    throw console.error(error);\n  }\n}\n\n","import React, { useState } from \"react\";\n\nconst MovieForm = ({formSubmit}) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = (e) => {\n    setValue(e.target.value)\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    formSubmit(value)\n  };\n  return (\n    <>\n      <form\n        className='d-flex mt-2'\n        role='search'\n        onSubmit={handleSubmit}\n      >\n        <input\n          className='form-control me-2 '\n          type='search'\n          placeholder='Search'\n          aria-label='Search'\n          onChange={handleChange}\n          value={value}\n        />\n        <button className='btn btn-outline-success' type='submit'>\n          Search\n        </button>\n      </form>\n    </>\n  )\n\n}\nexport default MovieForm;\n\n","import React, { useEffect, useState, lazy, Suspense } from \"react\";\nimport { Link, Route, Routes, useLocation, useParams, useSearchParams } from 'react-router-dom';\nimport MoviesForm from '../Movies/MovieForm';\nimport MoviesDetails from './MoviesDetails';\n\nimport { instance } from '../../Service/Api';\nimport css from '../../components/App.module.css';\n\nconst Cast = lazy(() => import('../../components/Cast/Cast'));\nconst Reviews = lazy(() => import('../../components/Reviews/Reviews'));\n\nconst Movies = () => {\n  const [filmList, setFilmList] = useState(null);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query');\n  const { movieId } = useParams();\n\n  const getRequestedMovie = async (search, movieId) => {\n    const routeWay = search\n      ? `/search/movie?query=${search}`\n      : `/movie/${movieId}`;\n\n    try {\n      const response = await instance.get(routeWay);\n      const data = response.data;\n      return data;\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (movieId) {\n      getRequestedMovie(null, movieId).then(setFilmList);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {filmList && (\n        <>\n          <MoviesDetails movieId={movieId} />\n          <MoviesForm\n            formSubmit={search => setSearchParams({ search })}\n            search={movieName}\n          />\n          <div className={css.box}>\n            <img src={`${instance.IMG}/${filmList.poster_path}`} alt={filmList.title} />\n\n            <div className={css.section_description}>\n              <h2>{filmList.title}</h2>\n              <p>User Score: {filmList.vote_average * 10}%</p>\n              <h3>Overview</h3>\n              <p>{filmList.overview}</p>\n              <h4>Genres</h4>\n              <p>{filmList.genres.map(genre => genre.name + ' ')}</p>\n            </div>\n          </div>\n          <div className={css.additional}>\n            <h5>Additional information</h5>\n            <ul>\n              <li>\n                <Link\n                  to={`/movies/${movieId}/cast`}\n                  state={{\n                    from: location.state.from,\n                    label: location.state.label,\n                  }}\n                >\n                  Cast\n                </Link>\n              </li>\n\n              <li>\n                <Link\n                  to={`/movies/${movieId}/reviews`}\n                  state={{\n                    from: location.state.from,\n                    label: location.state.label,\n                  }}\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <Suspense fallback={<p>Loading ...</p>}>\n            <Routes>\n              <Route path=\"/movies/:movieId/cast\" element={<Cast />} />\n              <Route path=\"/movies/:movieId/reviews\" element={<Reviews />} />\n            </Routes>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Movies;\n","import { useEffect, useState, Suspense } from \"react\";\nimport { Link, useLocation, useNavigate, useParams, Routes, Route } from \"react-router-dom\";\nimport { getMovieDetails } from '../../Service/Api';\n\nimport Cast from '../../components/Cast/Cast';\nimport Reviews from '../../components/Reviews/Reviews';\nimport css from '../../components/App.module.css';\nimport spareIMG from '../../components/img/spareIMG.png';\n\nconst IMAGEERR = 'https://image.tmdb.org/t/p/w500/';\n\nconst MoviesDetails = () => {\n  const [film, setFilm] = useState(null);\n  const { movieId } = useParams();\n  const movies = JSON.parse(localStorage.getItem('movie'));\n  const movie = movies && movies.find(elem => elem.id === movieId);\n  const locationDetails = useLocation();\n  const navigate = useNavigate();\n  const handleClick = () => {\n    navigate(locationDetails?.state?.from || '/');\n  };\n\n  useEffect(() => {\n    const fetchFilmData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setFilm(movieData);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchFilmData();\n  }, [movieId]);\n\n  const { genres, title, overview, vote_average, poster_path } = movie || {};\n\n  const image = poster_path ? IMAGEERR + poster_path : spareIMG;\n  const userScore = Math.round((Number(vote_average) * 100) / 10);\n  const movieGenres = genres && genres.map(genre => genre.name).join('');\n\n  return (\n    <>\n      {film && (\n        <>\n          <button className=\"btn btn-success m2\" onClick={handleClick}>\n            {locationDetails?.state?.label || 'Go Back'}\n          </button>\n          <div className={css.box}>\n            <img src={image} alt={title} />\n\n            <div className={css.description}>\n              <h2>{title}</h2>\n              <p>User Score: {userScore}%</p>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h4>Genres</h4>\n              <p>{movieGenres}</p>\n            </div>\n          </div>\n\n          <div className={css.additional}>\n            <h5>Additional information</h5>\n            <ul>\n              <li>\n                <Link\n                  to={`/movies/${movieId}/cast`}\n                  state={{\n                    from: locationDetails.state?.from || '/',\n                    label: locationDetails.state?.label,\n                  }}\n                >\n                  Cast\n                </Link>\n              </li>\n\n              <li>\n                <Link\n                  to={`/movies/${movieId}/reviews`}\n                  state={{\n                    from: locationDetails.state?.from || '/',\n                    label: locationDetails.state?.label,\n                  }}\n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <Suspense fallback={<p>Loading...</p>}>\n            <Routes>\n              <Route path=\"/movies/:movieId/cast\" element={<Cast />} />\n              <Route path=\"/movies/:movieId/reviews\" element={<Reviews />} />\n            </Routes>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["instance","axios","method","IMG","baseURL","params","api_key","language","getTrendMovies","get","data","results","console","error","getMovieDetails","movieId","routeWay","formSubmit","useState","value","setValue","className","role","onSubmit","e","preventDefault","type","placeholder","onChange","target","Cast","lazy","Reviews","filmList","setFilmList","location","useLocation","useSearchParams","searchParams","setSearchParams","movieName","useParams","getRequestedMovie","search","response","log","useEffect","then","MoviesDetails","css","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","to","state","from","label","Suspense","fallback","path","element","film","setFilm","movies","JSON","parse","localStorage","getItem","movie","find","elem","id","locationDetails","navigate","useNavigate","fetchFilmData","movieData","image","userScore","Math","round","Number","movieGenres","join","onClick"],"sourceRoot":""}